/*
 * Copyright 2019-present Infosys Limited
 *
 * SPDX-License-Identifier: Apache-2.0
 */

/******************************************************************************
 *
 * This is an auto generated file.
 * Please do not edit this file.
 * All edits to be made through template source file
 * <TOP-DIR/scripts/GtpV2StackCodeGen/tts/msgtemplate.cpp.tt>
 ******************************************************************************/ 

#include "forwardRelocationResponseMsg.h"
#include "../ieClasses/manual/gtpV2Ie.h"
#include "../ieClasses/gtpV2IeFactory.h"
#include "../ieClasses/causeIe.h"
#include "../ieClasses/fTeidIe.h"
#include "../ieClasses/indicationIe.h"
#include "../ieClasses/fContainerIe.h"
#include "../ieClasses/bearerContextIe.h"
#include "../ieClasses/listOfSetUpBearersInForwardRelocationResponse.h"
#include "../ieClasses/bearerContextIe.h"
#include "../ieClasses/listOfSetUpRabsInForwardRelocationResponse.h"
#include "../ieClasses/bearerContextIe.h"
#include "../ieClasses/listOfSetUpPfcsInForwardRelocationResponse.h"

ForwardRelocationResponseMsg::ForwardRelocationResponseMsg()
{
    msgType = ForwardRelocationResponseMsgType;
    Uint16 mandIe;
    mandIe = CauseIeType;
    mandIe = (mandIe << 8) | 0; // cause
    mandatoryIeSet.insert(mandIe);    mandIe = FTeidIeType;
    mandIe = (mandIe << 8) | 0; // senderFTeidForControlPlane
    mandatoryIeSet.insert(mandIe);
}

ForwardRelocationResponseMsg::~ForwardRelocationResponseMsg()
{

}

bool ForwardRelocationResponseMsg::encodeForwardRelocationResponseMsg(MsgBuffer &buffer,
                        ForwardRelocationResponseMsgData
							const &data)
{
    bool rc = false;
    GtpV2IeHeader header;
    Uint16 startIndex = 0;
    Uint16 endIndex = 0;
    Uint16 length = 0;

    
    // Encode the Ie Header
    header.ieType = CauseIeType;
    header.instance = 0;
    header.length = 0; // We will encode the IE first and then update the length
    GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
    startIndex = buffer.getCurrentIndex(); 
    CauseIe cause=
    dynamic_cast<
    CauseIe&>(GtpV2IeFactory::getInstance().getIeObject(CauseIeType));
    rc = cause.encodeCauseIe(buffer, data.cause);
    endIndex = buffer.getCurrentIndex();
    length = endIndex - startIndex;
    
    // encode the length value now
    buffer.goToIndex(startIndex - 3);
    buffer.writeUint16(length, false);
    buffer.goToIndex(endIndex);

    if (!(rc))
    { 
        errorStream.add((char *)"Failed to encode IE: cause\n");
        return false;
    }

    
    // Encode the Ie Header
    header.ieType = FTeidIeType;
    header.instance = 0;
    header.length = 0; // We will encode the IE first and then update the length
    GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
    startIndex = buffer.getCurrentIndex(); 
    FTeidIe senderFTeidForControlPlane=
    dynamic_cast<
    FTeidIe&>(GtpV2IeFactory::getInstance().getIeObject(FTeidIeType));
    rc = senderFTeidForControlPlane.encodeFTeidIe(buffer, data.senderFTeidForControlPlane);
    endIndex = buffer.getCurrentIndex();
    length = endIndex - startIndex;
    
    // encode the length value now
    buffer.goToIndex(startIndex - 3);
    buffer.writeUint16(length, false);
    buffer.goToIndex(endIndex);

    if (!(rc))
    { 
        errorStream.add((char *)"Failed to encode IE: senderFTeidForControlPlane\n");
        return false;
    }

    if (data.indicationFlagsIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = IndicationIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        IndicationIe indicationFlags=
        dynamic_cast<
        IndicationIe&>(GtpV2IeFactory::getInstance().getIeObject(IndicationIeType));
        rc = indicationFlags.encodeIndicationIe(buffer, data.indicationFlags);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: indicationFlags\n");
            return false;
        }
    }

    if (data.eUtranTransparentContainerIePresent)
    {
        
        // Encode the Ie Header
        header.ieType = FContainerIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        FContainerIe eUtranTransparentContainer=
        dynamic_cast<
        FContainerIe&>(GtpV2IeFactory::getInstance().getIeObject(FContainerIeType));
        rc = eUtranTransparentContainer.encodeFContainerIe(buffer, data.eUtranTransparentContainer);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
        
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);

        if (!(rc))
        { 
            errorStream.add((char *)"Failed to encode IE: eUtranTransparentContainer\n");
            return false;
        }
    }

    // First validate if the applicatoin provided more than the expected cardinality
    if (data.listOfSetUpBearersCount > 11)
    {
        errorStream.add((char *)"Number of entries of listOfSetUpBearers exceeded\n");
        errorStream.add((char *)"Expected count: 11 Received count: ");
        errorStream.add((char *)"data.listOfSetUpBearersCount");
        errorStream.endOfLine();
        return false;
    }
    for (Uint8 i = 0; i < data.listOfSetUpBearersCount; i++)
    {
    	// Encode the Ie Header
        header.ieType = BearerContextIeType;
        header.instance = 0;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        BearerContextIe listOfSetUpBearers=
        dynamic_cast<
        BearerContextIe&>(GtpV2IeFactory::getInstance().
        getIeObject(BearerContextIeType));
        ListOfSetUpBearersInForwardRelocationResponse groupedIeInstance = 
    	dynamic_cast<
    	ListOfSetUpBearersInForwardRelocationResponse&>(listOfSetUpBearers.getGroupedIe(msgType, 0));
        rc = groupedIeInstance.encodeListOfSetUpBearersInForwardRelocationResponse(buffer, data.listOfSetUpBearers[i]);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
    
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);
    }

    if (!(rc))
    { 
        errorStream.add((char *)"Failed to encode IE: listOfSetUpBearers\n");
        return false;
    }

    // First validate if the applicatoin provided more than the expected cardinality
    if (data.listOfSetUpRabsCount > 11)
    {
        errorStream.add((char *)"Number of entries of listOfSetUpRabs exceeded\n");
        errorStream.add((char *)"Expected count: 11 Received count: ");
        errorStream.add((char *)"data.listOfSetUpRabsCount");
        errorStream.endOfLine();
        return false;
    }
    for (Uint8 i = 0; i < data.listOfSetUpRabsCount; i++)
    {
    	// Encode the Ie Header
        header.ieType = BearerContextIeType;
        header.instance = 1;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        BearerContextIe listOfSetUpRabs=
        dynamic_cast<
        BearerContextIe&>(GtpV2IeFactory::getInstance().
        getIeObject(BearerContextIeType));
        ListOfSetUpRabsInForwardRelocationResponse groupedIeInstance = 
    	dynamic_cast<
    	ListOfSetUpRabsInForwardRelocationResponse&>(listOfSetUpRabs.getGroupedIe(msgType, 1));
        rc = groupedIeInstance.encodeListOfSetUpRabsInForwardRelocationResponse(buffer, data.listOfSetUpRabs[i]);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
    
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);
    }

    if (!(rc))
    { 
        errorStream.add((char *)"Failed to encode IE: listOfSetUpRabs\n");
        return false;
    }

    // First validate if the applicatoin provided more than the expected cardinality
    if (data.listOfSetUpPfcsCount > 11)
    {
        errorStream.add((char *)"Number of entries of listOfSetUpPfcs exceeded\n");
        errorStream.add((char *)"Expected count: 11 Received count: ");
        errorStream.add((char *)"data.listOfSetUpPfcsCount");
        errorStream.endOfLine();
        return false;
    }
    for (Uint8 i = 0; i < data.listOfSetUpPfcsCount; i++)
    {
    	// Encode the Ie Header
        header.ieType = BearerContextIeType;
        header.instance = 2;
        header.length = 0; // We will encode the IE first and then update the length
        GtpV2Ie::encodeGtpV2IeHeader(buffer, header);
        startIndex = buffer.getCurrentIndex(); 
        BearerContextIe listOfSetUpPfcs=
        dynamic_cast<
        BearerContextIe&>(GtpV2IeFactory::getInstance().
        getIeObject(BearerContextIeType));
        ListOfSetUpPfcsInForwardRelocationResponse groupedIeInstance = 
    	dynamic_cast<
    	ListOfSetUpPfcsInForwardRelocationResponse&>(listOfSetUpPfcs.getGroupedIe(msgType, 2));
        rc = groupedIeInstance.encodeListOfSetUpPfcsInForwardRelocationResponse(buffer, data.listOfSetUpPfcs[i]);
        endIndex = buffer.getCurrentIndex();
        length = endIndex - startIndex;
    
        // encode the length value now
        buffer.goToIndex(startIndex - 3);
        buffer.writeUint16(length, false);
        buffer.goToIndex(endIndex);
    }

    if (!(rc))
    { 
        errorStream.add((char *)"Failed to encode IE: listOfSetUpPfcs\n");
        return false;
    }
    return rc;

}

bool ForwardRelocationResponseMsg::decodeForwardRelocationResponseMsg(MsgBuffer &buffer,
 ForwardRelocationResponseMsgData 
 &data, Uint16 length)
{

    bool rc = false;
    GtpV2IeHeader ieHeader;
  
    set<Uint16> mandatoryIeLocalList = mandatoryIeSet;
    while (buffer.lengthLeft() > IE_HEADER_SIZE)
    {
        GtpV2Ie::decodeGtpV2IeHeader(buffer, ieHeader);
        if (ieHeader.length > buffer.lengthLeft())
        {
            // We do not have enough bytes left in the message for this IE
            errorStream.add((char *)"IE Length exceeds beyond message boundary\n");
            errorStream.add((char *)"  Offending IE Type: ");
            errorStream.add(ieHeader.ieType);
            errorStream.add((char *)"\n  Ie Length in Header: ");
            errorStream.add(ieHeader.length);
            errorStream.add((char *)"\n  Bytes left in message: ");
            errorStream.add(buffer.lengthLeft());
            errorStream.endOfLine();
            return false;
        }

        switch (ieHeader.ieType){
     
            case CauseIeType:
            {
                CauseIe ieObject =
                dynamic_cast<
                CauseIe&>(GtpV2IeFactory::getInstance().getIeObject(CauseIeType));

                if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodeCauseIe(buffer, data.cause, ieHeader.length);

                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: cause\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
     
            case FTeidIeType:
            {
                FTeidIe ieObject =
                dynamic_cast<
                FTeidIe&>(GtpV2IeFactory::getInstance().getIeObject(FTeidIeType));

                if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodeFTeidIe(buffer, data.senderFTeidForControlPlane, ieHeader.length);

                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: senderFTeidForControlPlane\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
     
            case IndicationIeType:
            {
                IndicationIe ieObject =
                dynamic_cast<
                IndicationIe&>(GtpV2IeFactory::getInstance().getIeObject(IndicationIeType));

                if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodeIndicationIe(buffer, data.indicationFlags, ieHeader.length);

                    data.indicationFlagsIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: indicationFlags\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
     
            case FContainerIeType:
            {
                FContainerIe ieObject =
                dynamic_cast<
                FContainerIe&>(GtpV2IeFactory::getInstance().getIeObject(FContainerIeType));

                if(ieHeader.instance == 0)
                {
                    rc = ieObject.decodeFContainerIe(buffer, data.eUtranTransparentContainer, ieHeader.length);

                    data.eUtranTransparentContainerIePresent = true;
                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: eUtranTransparentContainer\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }
     
            case BearerContextIeType:
            {
                BearerContextIe ieObject =
                dynamic_cast<
                BearerContextIe&>(GtpV2IeFactory::getInstance().getIeObject(BearerContextIeType));

                if(ieHeader.instance == 0)
                {
                    // First check if we have enough space left to decode and store this instance
                    if (data.listOfSetUpBearersCount == 11)
                    {
                        errorStream.add((char *)"More than 11 instances of listOfSetUpBearers received\n");
                    	return false;
                    }
                    ListOfSetUpBearersInForwardRelocationResponse groupedIeInstance =
                    dynamic_cast<
                    ListOfSetUpBearersInForwardRelocationResponse&>(ieObject.getGroupedIe(msgType, 0));
                    rc = groupedIeInstance.decodeListOfSetUpBearersInForwardRelocationResponse(buffer,
                    data.listOfSetUpBearers[data.listOfSetUpBearersCount], ieHeader.length);
                    data.listOfSetUpBearersCount++; // TODO Count validation

                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: listOfSetUpBearers\n");
                        return false;
                    }
                }
                else if(ieHeader.instance == 1)
                {
                    // First check if we have enough space left to decode and store this instance
                    if (data.listOfSetUpRabsCount == 11)
                    {
                        errorStream.add((char *)"More than 11 instances of listOfSetUpRabs received\n");
                    	return false;
                    }
                    ListOfSetUpRabsInForwardRelocationResponse groupedIeInstance =
                    dynamic_cast<
                    ListOfSetUpRabsInForwardRelocationResponse&>(ieObject.getGroupedIe(msgType, 1));
                    rc = groupedIeInstance.decodeListOfSetUpRabsInForwardRelocationResponse(buffer,
                    data.listOfSetUpRabs[data.listOfSetUpRabsCount], ieHeader.length);
                    data.listOfSetUpRabsCount++; // TODO Count validation

                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: listOfSetUpRabs\n");
                        return false;
                    }
                }
                else if(ieHeader.instance == 2)
                {
                    // First check if we have enough space left to decode and store this instance
                    if (data.listOfSetUpPfcsCount == 11)
                    {
                        errorStream.add((char *)"More than 11 instances of listOfSetUpPfcs received\n");
                    	return false;
                    }
                    ListOfSetUpPfcsInForwardRelocationResponse groupedIeInstance =
                    dynamic_cast<
                    ListOfSetUpPfcsInForwardRelocationResponse&>(ieObject.getGroupedIe(msgType, 2));
                    rc = groupedIeInstance.decodeListOfSetUpPfcsInForwardRelocationResponse(buffer,
                    data.listOfSetUpPfcs[data.listOfSetUpPfcsCount], ieHeader.length);
                    data.listOfSetUpPfcsCount++; // TODO Count validation

                    if (!(rc))
                    {
                        errorStream.add((char *)"Failed to decode IE: listOfSetUpPfcs\n");
                        return false;
                    }
                }

                else
                {
                    // Unknown IE instance print error
                    errorStream.add((char *)"Unknown IE Type: ");
                    errorStream.add(ieHeader.ieType);
                    errorStream.endOfLine();
                    buffer.skipBytes(ieHeader.length);
                }
                break;
            }

            default:
            {
                // Unknown IE print error
                errorStream.add((char *)"Unknown IE Type: ");
                errorStream.add(ieHeader.ieType);
                errorStream.endOfLine();
                buffer.skipBytes(ieHeader.length);
            }
        }
    }
    return rc; // TODO validations
}

void ForwardRelocationResponseMsg::
displayForwardRelocationResponseMsgData_v(ForwardRelocationResponseMsgData const &data, Debug &stream)
{
    stream.incrIndent();
    stream.add((char *)"ForwardRelocationResponseMsg:");
    stream.endOfLine();
    stream.incrIndent();
        
    
    stream.add((char *)"IE - cause:");
    stream.endOfLine();
    CauseIe cause=
    dynamic_cast<
    CauseIe&>(GtpV2IeFactory::getInstance().getIeObject(CauseIeType));
    cause.displayCauseIe_v(data.cause, stream);

    stream.add((char *)"IE - senderFTeidForControlPlane:");
    stream.endOfLine();
    FTeidIe senderFTeidForControlPlane=
    dynamic_cast<
    FTeidIe&>(GtpV2IeFactory::getInstance().getIeObject(FTeidIeType));
    senderFTeidForControlPlane.displayFTeidIe_v(data.senderFTeidForControlPlane, stream);

    if (data.indicationFlagsIePresent)
    {


        stream.add((char *)"IE - indicationFlags:");
        stream.endOfLine();
        IndicationIe indicationFlags=
        dynamic_cast<
        IndicationIe&>(GtpV2IeFactory::getInstance().getIeObject(IndicationIeType));
        indicationFlags.displayIndicationIe_v(data.indicationFlags, stream);

    }
    if (data.eUtranTransparentContainerIePresent)
    {


        stream.add((char *)"IE - eUtranTransparentContainer:");
        stream.endOfLine();
        FContainerIe eUtranTransparentContainer=
        dynamic_cast<
        FContainerIe&>(GtpV2IeFactory::getInstance().getIeObject(FContainerIeType));
        eUtranTransparentContainer.displayFContainerIe_v(data.eUtranTransparentContainer, stream);

    }

    Uint8 displayCount;
    
    displayCount = data.listOfSetUpBearersCount;
    if (displayCount > 11)
    {
        stream.add((char *)"Invalid data more than 11 instances");
        stream.endOfLine();
        stream.add((char *)"Displaying only 11");
        stream.endOfLine();
        displayCount = 11;
    }
    for (Uint8 i = 0; i < displayCount; i++)
    {
        stream.add((char *)"IE -  listOfSetUpBearers:");
        stream.endOfLine();
        BearerContextIe listOfSetUpBearers=
        dynamic_cast<
        BearerContextIe&>(GtpV2IeFactory::getInstance().getIeObject(BearerContextIeType));
        ListOfSetUpBearersInForwardRelocationResponse groupedIeInstance =
        dynamic_cast<
        ListOfSetUpBearersInForwardRelocationResponse&>(listOfSetUpBearers.getGroupedIe(msgType, 0));
        groupedIeInstance.displayListOfSetUpBearersInForwardRelocationResponseData_v(data.listOfSetUpBearers[i], stream);
    }  
    displayCount = data.listOfSetUpRabsCount;
    if (displayCount > 11)
    {
        stream.add((char *)"Invalid data more than 11 instances");
        stream.endOfLine();
        stream.add((char *)"Displaying only 11");
        stream.endOfLine();
        displayCount = 11;
    }
    for (Uint8 i = 0; i < displayCount; i++)
    {
        stream.add((char *)"IE -  listOfSetUpRabs:");
        stream.endOfLine();
        BearerContextIe listOfSetUpRabs=
        dynamic_cast<
        BearerContextIe&>(GtpV2IeFactory::getInstance().getIeObject(BearerContextIeType));
        ListOfSetUpRabsInForwardRelocationResponse groupedIeInstance =
        dynamic_cast<
        ListOfSetUpRabsInForwardRelocationResponse&>(listOfSetUpRabs.getGroupedIe(msgType, 1));
        groupedIeInstance.displayListOfSetUpRabsInForwardRelocationResponseData_v(data.listOfSetUpRabs[i], stream);
    }  
    displayCount = data.listOfSetUpPfcsCount;
    if (displayCount > 11)
    {
        stream.add((char *)"Invalid data more than 11 instances");
        stream.endOfLine();
        stream.add((char *)"Displaying only 11");
        stream.endOfLine();
        displayCount = 11;
    }
    for (Uint8 i = 0; i < displayCount; i++)
    {
        stream.add((char *)"IE -  listOfSetUpPfcs:");
        stream.endOfLine();
        BearerContextIe listOfSetUpPfcs=
        dynamic_cast<
        BearerContextIe&>(GtpV2IeFactory::getInstance().getIeObject(BearerContextIeType));
        ListOfSetUpPfcsInForwardRelocationResponse groupedIeInstance =
        dynamic_cast<
        ListOfSetUpPfcsInForwardRelocationResponse&>(listOfSetUpPfcs.getGroupedIe(msgType, 2));
        groupedIeInstance.displayListOfSetUpPfcsInForwardRelocationResponseData_v(data.listOfSetUpPfcs[i], stream);
    }  

    stream.decrIndent();
    stream.decrIndent();
}

